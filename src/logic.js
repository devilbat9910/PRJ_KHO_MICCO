/**
 * @OnlyCurrentDoc
 * T·ªÜP LOGIC CH√çNH
 * Ch·ª©a c√°c h√†m x·ª≠ l√Ω nghi·ªáp v·ª• c·ªßa ·ª©ng d·ª•ng.
 */

//================================================================
// SECTION: HI·ªÇN TH·ªä V√Ä L·∫§Y D·ªÆ LI·ªÜU FORM
//================================================================

function getDropdownData() {
  try {
    return getMasterDataForForm();
  } catch (e) {
    Logger.log(`L·ªñI trong getDropdownData (logic.js): ${e.message}`);
    throw new Error(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu danh m·ª•c. L·ªói: ${e.message}`);
  }
}

/**
 * H√†m c·∫ßu n·ªëi ƒë·ªÉ l·∫•y d·ªØ li·ªáu giao d·ªãch g·ªëc t·ª´ LOG ƒë·ªÉ s·ª≠a.
 * @param {string} indexValue - M√£ INDEX (SKU) c·∫ßn tra c·ª©u.
 * @returns {object | null} - D·ªØ li·ªáu chi ti·∫øt c·ªßa giao d·ªãch.
 */
function getDataForEdit(indexValue) {
  try {
    return service_getOriginalTransactionForEdit(indexValue);
  } catch (e) {
    Logger.log(`L·ªói trong getDataForEdit(logic.js): ${e.stack}`);
    throw new Error(`Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho INDEX "${indexValue}". L·ªói: ${e.message}`);
  }
}

//================================================================
// SECTION: X·ª¨ L√ù GIAO D·ªäCH V√Ä C·∫¨P NH·∫¨T KHO
//================================================================

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ Sidebar.
 * @param {object} formObject - D·ªØ li·ªáu t·ª´ form.
 * @param {boolean} isUpdate - C·ªù x√°c ƒë·ªãnh ƒë√¢y c√≥ ph·∫£i l√† giao d·ªãch c·∫≠p nh·∫≠t kh√¥ng.
 * @param {object} originalTx - D·ªØ li·ªáu giao d·ªãch g·ªëc (ch·ªâ khi isUpdate = true).
 * @returns {object} - K·∫øt qu·∫£ th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i.
 */
function processFormData(formObject, isUpdate = false, originalTx = null) {
  try {
    let result;
    if (isUpdate) {
      Logger.log("B·∫Øt ƒë·∫ßu service_updateTransaction...");
      result = service_updateTransaction(formObject, originalTx);
    } else {
      Logger.log("B·∫Øt ƒë·∫ßu service_processSingleTransaction...");
      result = service_processSingleTransaction(formObject);
    }
    Logger.log("Ho√†n th√†nh x·ª≠ l√Ω. K·∫øt qu·∫£: " + JSON.stringify(result));

    if (result.success) {
      Logger.log("B·∫Øt ƒë·∫ßu updateDashboardRecentTransactions...");
      updateDashboardRecentTransactions();
      Logger.log("Ho√†n th√†nh updateDashboardRecentTransactions.");
    }
    
    return result;
  } catch (e) {
    Logger.log(`L·ªói trong processFormData (logic.js): ${e.stack}`);
    return { success: false, message: 'L·ªói: ' + e.message };
  }
}

//================================================================
// SECTION: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU L√äN TRANG CH√çNH
//================================================================

/**
 * C·∫≠p nh·∫≠t b·∫£ng "10 giao d·ªãch g·∫ßn nh·∫•t" tr√™n sheet INPUT.
 */
function updateDashboardRecentTransactions() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  // S·ª¨A L·ªñI: S·ª≠ d·ª•ng tr·ª±c ti·∫øp V√πng ƒë∆∞·ª£c ƒë·∫∑t t√™n 'INPUT_RECENT'
  const targetRange = ss.getRangeByName('INPUT_RECENT');

  if (!targetRange) {
    Logger.log('L·ªói: Kh√¥ng t√¨m th·∫•y V√πng ƒë∆∞·ª£c ƒë·∫∑t t√™n "INPUT_RECENT". Vui l√≤ng t·∫°o n√≥.');
    return;
  }
  
  // L·∫•y d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
  const recentLogsData = db_getRecentLogs(11); // L·∫•y 11 d√≤ng g·∫ßn nh·∫•t

  // √Ånh x·∫° d·ªØ li·ªáu t·ª´ 18 c·ªôt c·ªßa LOG sang 11 c·ªôt c·ªßa INPUT_RECENT
  const transactions = recentLogsData.map(logRow => {
    return [
      logRow[16],       // Nh·∫≠p/xu·∫•t
      logRow[3],        // T√™n s·∫£n ph·∫©m -> Vi·∫øt t·∫Øt
      logRow[4],        // Quy c√°ch
      logRow[5],        // S·ªë l∆∞·ª£ng
      logRow[6],        // Ng√†y s·∫£n xu·∫•t
      logRow[7],        // Ph√¢n x∆∞·ªüng -> M√£ ph√¢n x∆∞·ªüng (ƒë√£ ƒë∆∞·ª£c s·ª≠a khi ghi log)
      logRow[10],       // T√™n kho -> M√£ kho
      logRow[14],       // T√¨nh tr·∫°ng ch·∫•t l∆∞·ª£ng
      logRow[17],       // Ghi ch√∫
      logRow[0],        // M√£ index
      logRow[8]         // M√£ l√¥
    ];
  }).reverse(); // ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ giao d·ªãch m·ªõi nh·∫•t ·ªü tr√™n c√πng
  
  // X√≥a d·ªØ li·ªáu c≈© (ƒë·ªÉ l·∫°i d√≤ng ti√™u ƒë·ªÅ).
  // KI·ªÇM TRA PH√íNG V·ªÜ: Ch·ªâ x√≥a n·∫øu c√≥ nhi·ªÅu h∆°n 1 d√≤ng (c√≥ d·ªØ li·ªáu c≈©).
  if (targetRange.getNumRows() > 1) {
    const dataRange = targetRange.offset(1, 0, targetRange.getNumRows() - 1);
    dataRange.clearContent();
  }

  if (transactions && transactions.length > 0) {
    // Ghi d·ªØ li·ªáu m·ªõi v√†o v√πng, b·∫Øt ƒë·∫ßu t·ª´ d√≤ng th·ª© 2 (d∆∞·ªõi ti√™u ƒë·ªÅ).
    const destinationRange = targetRange.offset(1, 0, transactions.length, transactions[0].length);
    destinationRange.setValues(transactions);
    Logger.log(`ƒê√£ c·∫≠p nh·∫≠t ${transactions.length} giao d·ªãch g·∫ßn ƒë√¢y v√†o v√πng INPUT_RECENT.`);
  } else {
    Logger.log("Kh√¥ng c√≥ giao d·ªãch g·∫ßn ƒë√¢y n√†o ƒë·ªÉ hi·ªÉn th·ªã.");
  }
}

//================================================================
// SECTION: B√ÅO C√ÅO & CH·ªêT S·ªî
//================================================================

function createMonthlySnapshot() {
  const ui = SpreadsheetApp.getUi();
  try {
    const result = service_createMonthlySnapshot();
    ui.alert(result.message);
  } catch (e) {
    Logger.log(`L·ªói khi t·∫°o snapshot: ${e.stack}`);
    ui.alert(`ƒê√£ x·∫£y ra l·ªói: ${e.message}`);
  }
}

function generateMonthlyReport() {
  const ui = SpreadsheetApp.getUi();
  try {
    const result = service_generateMonthlyReport();
    ui.alert(result.message);
  } catch (e) {
    Logger.log(`L·ªói khi t·∫°o b√°o c√°o: ${e.stack}`);
    ui.alert(`ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o: ${e.message}`);
  }
}

//================================================================
// SECTION: TRA C·ª®U
//================================================================

function logic_performSearch(searchCriteria) {
  try {
    return service_performSearch(searchCriteria);
  } catch (e) {
    Logger.log(`L·ªói trong logic_performSearch: ${e.stack}`);
    return { success: false, message: e.message };
  }
}

function logic_getSkuDetails(sku) {
  try {
    return service_getSkuDetails(sku);
  } catch (e) {
    Logger.log(`L·ªói trong logic_getSkuDetails: ${e.stack}`);
    return { success: false, message: e.message };
  }
}

function showTraCuuDialogForEdit() {
  const t = HtmlService.createTemplateFromFile('TraCuu');
  t.mode = 'edit';
  const html = t.evaluate().setWidth(1200).setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, 'üìä Ch·ªçn Giao D·ªãch C·∫ßn S·ª≠a');
}


function passDataToOpener(data) {
  const cache = CacheService.getUserCache();
  const key = 'edit_data_' + Session.getEffectiveUser().getEmail();
  cache.put(key, JSON.stringify(data), 60);
  Logger.log("ƒê√£ l∆∞u d·ªØ li·ªáu ƒë·ªÉ s·ª≠a v√†o cache.");
}

function checkForEditData() {
  const cache = CacheService.getUserCache();
  const key = 'edit_data_' + Session.getEffectiveUser().getEmail();
  const data = cache.get(key);
  if (data) {
    cache.remove(key);
    return JSON.parse(data);
  }
  return null;
}
