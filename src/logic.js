/**
 * @OnlyCurrentDoc
 * T·ªÜP LOGIC CH√çNH
 * Ch·ª©a c√°c h√†m x·ª≠ l√Ω nghi·ªáp v·ª• c·ªßa ·ª©ng d·ª•ng.
 */

//================================================================
// SECTION: HI·ªÇN TH·ªä V√Ä L·∫§Y D·ªÆ LI·ªÜU FORM
//================================================================

function showSidebar() {
  const html = HtmlService.createTemplateFromFile('FormNhapLieu').evaluate().setTitle('üìù Form Nh·∫≠p/Xu·∫•t Kho');
  SpreadsheetApp.getUi().showSidebar(html);
}

function getDropdownData() {
  try {
    return getMasterDataForForm();
  } catch (e) {
    Logger.log(`L·ªñI trong getDropdownData (logic.js): ${e.message}`);
    throw new Error(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu danh m·ª•c. L·ªói: ${e.message}`);
  }
}

/**
 * H√†m c·∫ßu n·ªëi ƒë·ªÉ l·∫•y d·ªØ li·ªáu giao d·ªãch g·ªëc t·ª´ LOG ƒë·ªÉ s·ª≠a.
 * @param {string} indexValue - M√£ INDEX (SKU) c·∫ßn tra c·ª©u.
 * @returns {object | null} - D·ªØ li·ªáu chi ti·∫øt c·ªßa giao d·ªãch.
 */
function getDataForEdit(indexValue) {
  try {
    return service_getOriginalTransactionForEdit(indexValue);
  } catch (e) {
    Logger.log(`L·ªói trong getDataForEdit(logic.js): ${e.stack}`);
    throw new Error(`Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho INDEX "${indexValue}". L·ªói: ${e.message}`);
  }
}

//================================================================
// SECTION: X·ª¨ L√ù GIAO D·ªäCH V√Ä C·∫¨P NH·∫¨T KHO
//================================================================

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ Sidebar.
 * @param {object} formObject - D·ªØ li·ªáu t·ª´ form.
 * @param {boolean} isUpdate - C·ªù x√°c ƒë·ªãnh ƒë√¢y c√≥ ph·∫£i l√† giao d·ªãch c·∫≠p nh·∫≠t kh√¥ng.
 * @param {object} originalTx - D·ªØ li·ªáu giao d·ªãch g·ªëc (ch·ªâ khi isUpdate = true).
 * @returns {object} - K·∫øt qu·∫£ th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i.
 */
function processFormData(formObject, isUpdate = false, originalTx = null) {
  try {
    let result;
    if (isUpdate) {
      Logger.log("B·∫Øt ƒë·∫ßu service_updateTransaction...");
      result = service_updateTransaction(formObject, originalTx);
    } else {
      Logger.log("B·∫Øt ƒë·∫ßu service_processSingleTransaction...");
      result = service_processSingleTransaction(formObject);
    }
    Logger.log("Ho√†n th√†nh x·ª≠ l√Ω. K·∫øt qu·∫£: " + JSON.stringify(result));

    if (result.success) {
      Logger.log("B·∫Øt ƒë·∫ßu updateDashboardRecentTransactions...");
      updateDashboardRecentTransactions();
      Logger.log("Ho√†n th√†nh updateDashboardRecentTransactions.");
    }
    
    return result;
  } catch (e) {
    Logger.log(`L·ªói trong processFormData (logic.js): ${e.stack}`);
    return { success: false, message: 'L·ªói: ' + e.message };
  }
}

//================================================================
// SECTION: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU L√äN TRANG CH√çNH
//================================================================

/**
 * C·∫≠p nh·∫≠t b·∫£ng "10 giao d·ªãch g·∫ßn nh·∫•t" tr√™n Trang Ch√≠nh.
 */
function updateDashboardRecentTransactions() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const mainSheet = ss.getSheetByName(MAIN_SHEET_NAME);
  if (!mainSheet) {
    Logger.log(`Kh√¥ng t√¨m th·∫•y sheet "${MAIN_SHEET_NAME}" ƒë·ªÉ c·∫≠p nh·∫≠t.`);
    return;
  }
  const transactions = service_getRecentTransactions();

  const targetRange = mainSheet.getRange(RECENT_TRANSACTIONS_RANGE);
  targetRange.offset(1, 0, targetRange.getNumRows() - 1).clearContent();
  if (transactions.length > 0 && transactions[0].length > 0) {
    mainSheet.getRange(4, 1, transactions.length, transactions[0].length).setValues(transactions);
  } else {
    Logger.log("Kh√¥ng c√≥ giao d·ªãch n√†o ƒë·ªÉ hi·ªÉn th·ªã.");
  }
}

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ b·∫£ng NH·∫¨P TH·ª¶ C√îNG.
 */
function processManualInputTable() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const mainSheet = ss.getSheetByName(MAIN_SHEET_NAME);
  if (!mainSheet) {
    ui.alert("Kh√¥ng t√¨m th·∫•y Trang Ch√≠nh.");
    return;
  }

  const inputTableRange = mainSheet.getRange(MANUAL_INPUT_RANGE);
  const dataRegion = inputTableRange.offset(1, 0, inputTableRange.getNumRows() - 1);
  const inputData = dataRegion.getValues();
  
  let processedCount = 0;
  const rowsToClear = [];

  inputData.forEach((row, index) => {
    if (row.every(cell => cell === '')) return;

    const transactionObject = {
      loaiGiaoDich: row[1],
      tenSanPham: row[2],
      quyCach: row[3],
      loSanXuat: row[4],
      ngaySanXuat: row[5],
      tinhTrangChatLuong: row[6],
      soLuong: row[7],
      phanXuong: row[8],
      kho: row[9],
      ghiChu: row[10]
    };

    try {
      if (!transactionObject.tenSanPham || !transactionObject.soLuong || !transactionObject.ngaySanXuat || !transactionObject.kho) {
        throw new Error("Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.");
      }
      
      service_processSingleTransaction(transactionObject);
      processedCount++;
      rowsToClear.push(index + 1);

    } catch (e) {
      const errorCell = dataRegion.getCell(index + 1, 1);
      errorCell.setBackground("#f4cccc").setNote(`L·ªói: ${e.message}`);
    }
  });

  if (processedCount > 0) {
     rowsToClear.reverse().forEach(relativeRowIndex => {
        const absoluteRowIndex = inputTableRange.getRow() + relativeRowIndex;
        mainSheet.deleteRow(absoluteRowIndex);
     });
     ui.alert(`Ho√†n t·∫•t x·ª≠ l√Ω. ${processedCount} giao d·ªãch ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.`);
  } else {
     ui.alert("Kh√¥ng c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c x·ª≠ l√Ω.");
  }
  updateDashboardRecentTransactions();
}

//================================================================
// SECTION: B√ÅO C√ÅO & CH·ªêT S·ªî
//================================================================

function createMonthlySnapshot() {
  const ui = SpreadsheetApp.getUi();
  try {
    const result = service_createMonthlySnapshot();
    ui.alert(result.message);
  } catch (e) {
    Logger.log(`L·ªói khi t·∫°o snapshot: ${e.stack}`);
    ui.alert(`ƒê√£ x·∫£y ra l·ªói: ${e.message}`);
  }
}

function generateMonthlyReport() {
  const ui = SpreadsheetApp.getUi();
  try {
    const result = service_generateMonthlyReport();
    ui.alert(result.message);
  } catch (e) {
    Logger.log(`L·ªói khi t·∫°o b√°o c√°o: ${e.stack}`);
    ui.alert(`ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o: ${e.message}`);
  }
}

//================================================================
// SECTION: TRA C·ª®U
//================================================================

function showTraCuuDialog() {
  const html = HtmlService.createHtmlOutputFromFile('TraCuu')
    .setWidth(1200)
    .setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, 'üìä Tra C·ª©u T·ªìn Kho');
}

function logic_performSearch(searchCriteria) {
  try {
    return service_performSearch(searchCriteria);
  } catch (e) {
    Logger.log(`L·ªói trong logic_performSearch: ${e.stack}`);
    return { success: false, message: e.message };
  }
}

function showTraCuuDialogForEdit() {
  const t = HtmlService.createTemplateFromFile('TraCuu');
  t.mode = 'edit';
  const html = t.evaluate().setWidth(1200).setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, 'üìä Ch·ªçn Giao D·ªãch C·∫ßn S·ª≠a');
}

function passDataToOpener(data) {
  const cache = CacheService.getUserCache();
  const key = 'edit_data_' + Session.getEffectiveUser().getEmail();
  cache.put(key, JSON.stringify(data), 60);
  Logger.log("ƒê√£ l∆∞u d·ªØ li·ªáu ƒë·ªÉ s·ª≠a v√†o cache.");
}

function checkForEditData() {
  const cache = CacheService.getUserCache();
  const key = 'edit_data_' + Session.getEffectiveUser().getEmail();
  const data = cache.get(key);
  if (data) {
    cache.remove(key);
    return JSON.parse(data);
  }
  return null;
}
