/**
 * @OnlyCurrentDoc
 * T·ªÜP C·∫§U H√åNH V√Ä THI·∫æT L·∫¨P
 * Ch·ª©a c√°c bi·∫øn to√†n c·ª•c v√† c√°c h√†m ch·∫°y m·ªôt l·∫ßn.
 */

// --- BI·∫æN C·∫§U H√åNH ---
const CONFIG_SHEET_NAME = 'DANH MUC';
const INVENTORY_SHEET_NAME = 'TON_KHO_HIEN_TAI';
const HISTORY_SHEET_PREFIX = 'LichSu_';
const SNAPSHOT_SHEET_PREFIX = 'Snapshot_';
const REPORT_SHEET_NAME = 'BaoCaoTonKho';
const MAIN_SHEET_NAME = 'Trang Ch√≠nh';
const VIEW_INVENTORY_SHEET_NAME = 'vw_tonkho'; // T√™n sheet View
const LOG_SHEET_NAME = 'LOG_GIAO_DICH_tbl';

// --- T·ªça ƒë·ªô b·∫£ng tr√™n Trang Ch√≠nh ---
const RECENT_TRANSACTIONS_RANGE = 'A3:K14'; // Header ·ªü d√≤ng 3, 11 d√≤ng data (4-14)
const MANUAL_INPUT_RANGE = 'A19:K30';      // Header ·ªü d√≤ng 19, 11 d√≤ng data (20-30)

// Th√™m ho·∫∑c b·ªõt c√°c kho b·∫°n mu·ªën theo d√µi t·∫°i ƒë√¢y.
const MONITORED_WAREHOUSES = ['Kho ƒêT3', 'Kho ƒêT4', 'Kho ƒêT5', 'Kho ƒêT6', 'Kho ƒêT7', 'Kho ƒêT8', 'Kho ƒêT9'];

/**
 * T·∫°o menu t√πy ch·ªânh khi m·ªü file Google Sheets.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('üì¶ Qu·∫£n L√Ω Kho');
  
  menu.addItem('B·∫£ng ƒëi·ªÅu khi·ªÉn', 'showSidebar');
  menu.addItem('Tra C·ª©u T·ªìn Kho', 'showTraCuuDialog');
  menu.addSeparator();
  
  const reportMenu = ui.createMenu('B√°o C√°o & Ch·ªët S·ªï');
  reportMenu.addItem('T·∫°o B√°o C√°o T·ªìn Kho Th√°ng', 'generateMonthlyReport');
  reportMenu.addItem('Ch·ªët S·ªï Cu·ªëi Th√°ng', 'createMonthlySnapshot');
  menu.addSubMenu(reportMenu);
  
  menu.addSeparator();
  
  const helpMenu = ui.createMenu('‚öôÔ∏è Tr·ª£ gi√∫p & C√†i ƒë·∫∑t');
  helpMenu.addItem('T·∫°o/M·ªü T√†i li·ªáu D·ª± √°n', 'createOrOpenDocumentation');
  helpMenu.addItem('T·∫°o Sheet Template cho Trang Ch√≠nh', 'createDashboardTemplateSheet');
  helpMenu.addItem('C·∫≠p nh·∫≠t Trang Ch√≠nh t·ª´ Template', 'updateDashboardFromTemplate');
  helpMenu.addSeparator();
  helpMenu.addItem('Thi·∫øt l·∫≠p c·∫•u tr√∫c (Ch·∫°y 1 l·∫ßn)', 'setupInitialStructure');
  menu.addSubMenu(helpMenu);

  menu.addToUi();
}

/**
 * REFACTORED (v3): H√†m thi·∫øt l·∫≠p c·∫•u tr√∫c an to√†n, kh√¥ng ph√° h·ªßy d·ªØ li·ªáu.
 * T·ª± ƒë·ªông ƒë·ªçc danh s√°ch kho, b·∫£o to√†n d·ªØ li·ªáu c≈© v√† √°p d·ª•ng c√¥ng th·ª©c m·∫£ng.
 */
function setupInitialStructure() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const MASTER_INVENTORY_SHEET = 'TON_KHO_tonghop';

  // --- B∆∞·ªõc 1: L·∫•y c·∫•u tr√∫c m·ªõi v√† d·ªØ li·ªáu c≈© ---
  const warehouseList = db_getWarehouseList();
  if (warehouseList.length === 0) {
    ui.alert("L·ªói: Kh√¥ng t√¨m th·∫•y kho n√†o trong sheet 'DANH MUC'.");
    return;
  }

  const identifierHeaders = ['INDEX', 'T√™n_SP', 'Quy_C√°ch', 'L√¥_SX', 'Ng√†y_SX', 'QC_Status', 'ƒêV_SX'];
  const totalColumnHeader = 'T·ªïng SL';
  const newHeaders = [...identifierHeaders, totalColumnHeader, ...warehouseList];
  
  let oldData = [];
  let oldHeaders = [];
  const sourceSheet = ss.getSheetByName(MASTER_INVENTORY_SHEET);
  if (sourceSheet && sourceSheet.getLastRow() > 2) {
    const dataRange = sourceSheet.getRange(3, 1, sourceSheet.getLastRow() - 2, sourceSheet.getLastColumn());
    oldData = dataRange.getValues();
    oldHeaders = sourceSheet.getRange(1, 1, 1, sourceSheet.getLastColumn()).getValues()[0];
  }

  // --- B∆∞·ªõc 2: T·∫°o sheet t·∫°m v√† ghi d·ªØ li·ªáu ƒë√£ √°nh x·∫° ---
  const tempSheetName = `temp_migration_${Date.now()}`;
  const tempSheet = ss.insertSheet(tempSheetName);
  
  // Ghi ti√™u ƒë·ªÅ m·ªõi v√†o sheet t·∫°m
  tempSheet.getRange(1, 1, 1, newHeaders.length).setValues([newHeaders]);

  // √Ånh x·∫° d·ªØ li·ªáu c≈© sang c·∫•u tr√∫c m·ªõi
  if (oldData.length > 0) {
    const mappedData = oldData.map(row => {
      const oldRowObject = oldHeaders.reduce((obj, header, i) => {
        obj[header] = row[i];
        return obj;
      }, {});
      
      return newHeaders.map(newHeader => {
        // Tr·∫£ v·ªÅ gi√° tr·ªã t·ª´ d·ªØ li·ªáu c≈© n·∫øu t√¨m th·∫•y, n·∫øu kh√¥ng th√¨ tr·∫£ v·ªÅ r·ªóng
        return oldRowObject[newHeader] !== undefined ? oldRowObject[newHeader] : "";
      });
    });
    tempSheet.getRange(3, 1, mappedData.length, mappedData[0].length).setValues(mappedData);
  }

  // --- B∆∞·ªõc 3: X√≥a sheet c≈© v√† ƒë·ªïi t√™n sheet t·∫°m ---
  if (sourceSheet) {
    ss.deleteSheet(sourceSheet);
  }
  tempSheet.setName(MASTER_INVENTORY_SHEET);
  const newInventorySheet = tempSheet; // Gi·ªù sheet t·∫°m l√† sheet ch√≠nh

  // --- B∆∞·ªõc 4: √Åp d·ª•ng c√¥ng th·ª©c v√† ƒë·ªãnh d·∫°ng ---
  const totalColumnPosition = identifierHeaders.length + 1; // C·ªôt H
  const firstWarehouseCol = String.fromCharCode('A'.charCodeAt(0) + totalColumnPosition);
  const lastWarehouseCol = String.fromCharCode('A'.charCodeAt(0) + totalColumnPosition + warehouseList.length - 1);
  
  // S·ª¨A L·ªñI C√îNG TH·ª®C: D√πng ARRAYFORMULA v√† d·∫•u ch·∫•m ph·∫©y
  const arrayFormula = `=ARRAYFORMULA(IF(A3:A="";;MMULT(IF(ISNUMBER(${firstWarehouseCol}3:${lastWarehouseCol});${firstWarehouseCol}3:${lastWarehouseCol};0);SEQUENCE(COLUMNS(${firstWarehouseCol}3:${lastWarehouseCol});1;1;0))))`;
  newInventorySheet.getRange(3, totalColumnPosition).setFormula(arrayFormula);
  
  // ƒê·∫∑t h√†ng t·ªïng c·ªông
  const totalRowFormulas = [];
  totalRowFormulas.push(`=IFERROR(SUM(H3:H))`);
  for (let i = 0; i < warehouseList.length; i++) {
    const colLetter = String.fromCharCode('A'.charCodeAt(0) + totalColumnPosition + i);
    totalRowFormulas.push(`=IFERROR(SUM(${colLetter}3:${colLetter}))`);
  }
  newInventorySheet.getRange(2, totalColumnPosition, 1, totalRowFormulas.length).setFormulas([totalRowFormulas]);
  newInventorySheet.getRange(2, identifierHeaders.length).setValue('T·ªîNG C·ªòNG').setFontWeight('bold').setHorizontalAlignment('right');

  // ƒê·ªãnh d·∫°ng cu·ªëi c√πng
  newInventorySheet.getRange(1, 1, 1, newHeaders.length).setFontWeight('bold').setBackground('#f3f3f3');
  newInventorySheet.setFrozenColumns(identifierHeaders.length);
  newInventorySheet.setFrozenRows(2);

  // X√≥a c√°c sheet t·ªìn kho c≈© kh√¥ng c√≤n s·ª≠ d·ª•ng
  const oldViewSheet = ss.getSheetByName(VIEW_INVENTORY_SHEET_NAME);
  if (oldViewSheet) ss.deleteSheet(oldViewSheet);
  const oldInventorySheet = ss.getSheetByName(INVENTORY_SHEET_NAME);
  if (oldInventorySheet) ss.deleteSheet(oldInventorySheet);

  ui.alert(`T√°i c·∫•u tr√∫c th√†nh c√¥ng! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c b·∫£o to√†n v√† di chuy·ªÉn sang c·∫•u tr√∫c m·ªõi. Sheet "${MASTER_INVENTORY_SHEET}" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªông.`);
}

/**
 * T·∫°o sheet template ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± thi·∫øt k·∫ø.
 */
function createDashboardTemplateSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const templateSheetName = 'TEMPLATE_TRANG_CHINH';
  if (!ss.getSheetByName(templateSheetName)) {
    ss.insertSheet(templateSheetName);
    SpreadsheetApp.getUi().alert(`ƒê√£ t·∫°o sheet "${templateSheetName}". Vui l√≤ng thi·∫øt k·∫ø giao di·ªán mong mu·ªën tr√™n sheet n√†y.`);
  } else {
    SpreadsheetApp.getUi().alert(`Sheet "${templateSheetName}" ƒë√£ t·ªìn t·∫°i.`);
  }
}

/**
 * C·∫≠p nh·∫≠t Trang Ch√≠nh d·ª±a tr√™n sheet template.
 */
function updateDashboardFromTemplate() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const templateSheet = ss.getSheetByName('TEMPLATE_TRANG_CHINH');
  if (!templateSheet) {
    SpreadsheetApp.getUi().alert('L·ªói: Kh√¥ng t√¨m th·∫•y sheet "TEMPLATE_TRANG_CHINH". Vui l√≤ng t·∫°o n√≥ tr∆∞·ªõc.');
    return;
  }

  let mainSheet = ss.getSheetByName(MAIN_SHEET_NAME);
  if (mainSheet) {
    ss.deleteSheet(mainSheet);
  }
  
  mainSheet = templateSheet.copyTo(ss).setName(MAIN_SHEET_NAME);
  
  // Ghi ƒë√® ti√™u ƒë·ªÅ cho b·∫£ng nh·∫≠p th·ªß c√¥ng ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
  const manualEntryHeaders = [
    ['INDEX (SKU)', 'Lo·∫°i Giao D·ªãch', 'T√™n S·∫£n Ph·∫©m', 'Quy C√°ch', 'L√¥ S·∫£n Xu·∫•t', 'Ng√†y S·∫£n Xu·∫•t', 'T√¨nh Tr·∫°ng Ch·∫•t L∆∞·ª£ng', 'S·ªë L∆∞·ª£ng', 'ƒê∆°n V·ªã S·∫£n Xu·∫•t', 'Kho', 'Ghi Ch√∫']
  ];
  mainSheet.getRange('A19:K19').setValues(manualEntryHeaders).setFontWeight('bold').setBackground('#f3f3f3');

  ss.setActiveSheet(mainSheet);
  SpreadsheetApp.getUi().alert('ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng Trang Ch√≠nh t·ª´ template!');
}
